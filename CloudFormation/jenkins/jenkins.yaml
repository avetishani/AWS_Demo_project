AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the SSH keypair to use for the EC2 instances.
    Default: 30deysdevops

  VPCStackName:
    Type: String
    Default: ProjectVPC
    MinLength: 1

  InstanceType:
    Type: String
    Description: Type of EC2 instance
    Default: t3.large
    ConstraintDescription: Must be a valid EC2 instance type.

  S3Path:
    Type: String
    Description: The S3 path
    Default: 30daysdevops

  SSLCertificate:
    Type: String
    Default: 'arn:aws:acm:us-east-1:230883561944:certificate/79616372-c929-4269-b861-dde983e0fb34'
    Description: ARN of Certificate attached to ELB

  DatadogSecretName:
    Type: String

    Description: Secret Name in SecretManager to extract Datadog API key
    Default: datadog_api_key

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0ff8a91507f77f867

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

      Policies:
        - PolicyName: EC2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - cloudformation:CreateStack
                  - iam:CreateInstanceProfile
                  - iam:CreateRole
                  - autoscaling:CreateLaunchConfiguration
                  - ec2:DescribeTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeAddresses
                  - ec2:CreateVolume
                  - ec2:CreateTags
                  - ec2:AttachVolume
                  - ec2:AssociateAddress
                  - secretsmanager:GetSecretValue
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: InstanceRole

  SimpleConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPairName
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      AssociatePublicIpAddress: True
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -o errexit
          set -o nounset
          set -o xtrace

          aws s3 cp "s3://${S3Path}/scripts/jenkins/install-docker.sh" - |       \
            bash -l -s --                                                 \
            --datadog-secret-name "${DatadogSecretName}"                  \
            --hostname jenkins

          echo $(date): Finished installing Jenkins

  MyServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Tags:
        - Key: 'service'
          Value: 'jenkins'
          PropagateAtLaunch: true
        - Key: 'environment'
          Value: 'ci'
          PropagateAtLaunch: true

      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
      LaunchConfigurationName: !Ref SimpleConfig
      MinSize: '1'
      MaxSize: '1'
      LoadBalancerNames:
        - Ref: JenkinsLoadBalancer

  JenkinsLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet0"
      SecurityGroups:
        - Ref: LBSecurityGroup
      Listeners:
        - InstancePort: 8080
          InstanceProtocol: HTTP
          LoadBalancerPort: 443
          Protocol: HTTPS
          SSLCertificateId: !Ref SSLCertificate
          PolicyNames:
            - TLSELBSecurityPolicy
      Policies:
        - PolicyName: TLSELBSecurityPolicy
          PolicyType: SSLNegotiationPolicyType
          Attributes:
            - Name: Reference-Security-Policy
              Value: ELBSecurityPolicy-TLS-1-2-2017-01
      Tags:
        - Key: 'service'
          Value: 'jenkins'
        - Key: 'resource'
          Value: 'ELB'
        - Key: 'environment'
          Value: 'ci'

  InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId:
          Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
        GroupDescription: SSH, HTTP
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      GroupDescription: HTTP, HTTPS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
