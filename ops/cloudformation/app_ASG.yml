AWSTemplateFormatVersion: '2010-09-09'
################################################################################
# Parameters
################################################################################
Parameters:
  ELBStackName:
    Type: String
    Default: qa-ELB2
    MinLength: 1

  VPCStackName:
    Type: String
    Default: ProjectVPC
    MinLength: 1

  SSHKey:
    Type: AWS::EC2::KeyPair::KeyName
    Default: 30deysdevops

  Environment:
    Type: String
    Description: Environment (qa, prod).
    AllowedValues: [qa, prod]
    ConstraintDescription: Must be a valid environment name
    Default: qa

  InstanceType:
    Type: String
    Description: Type of EC2 instance.
    Default: t2.micro
    ConstraintDescription: Must be a valid EC2 instance type.

  DeploySource:
    Type: String
    Description: Deploy (docker, s3).
    AllowedValues: [docker, s3]
    ConstraintDescription: Source from where the application will be deployed
    Default: docker

  DatadogSecretName:
    Type: String
    Description: Datadog API key
    Default: datadog_api_key

  Name:
    Type: String
    Default: app
    MaxLength: 50     # optional
    MinLength: 1     # optional

  Version:
    Type: String

################################################################################
# Mappings
################################################################################
Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0080e4c5bc078760e

################################################################################
# Resources
################################################################################
Resources:
  WebLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      SecurityGroups: [!Ref SSHSecurityGroup, !Ref HTTPSecurityGroup]
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKey
      IamInstanceProfile: !Ref InstanceProfile
      AssociatePublicIpAddress: no
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -o errexit
          set -o nounset
          set -o xtrace

          aws s3 cp "s3://30daysdevops/dropwizard/deploy/install-${DeploySource}.sh" - |  \
            bash -l -s --                                                 \
            --datadog-secret-name "${DatadogSecretName}"                  \
            --version ${Version}

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet0"
      LaunchConfigurationName: !Ref WebLaunchConfig
      LoadBalancerNames:
        - Fn::ImportValue: !Sub "${ELBStackName}-LoadBalancerID"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 120
      MinSize: '1'
      MaxSize: '5'
      Cooldown: 60
      DesiredCapacity: 1
      Tags:
        - Key: 'Name'
          Value: !Ref Name
          PropagateAtLaunch: true
        - Key: 'Service'
          Value: 'dropwizard'
          PropagateAtLaunch: true
        - Key: 'Environment'
          Value: !Ref Environment
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 0
        Timeout: "PT10M"

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: 60
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: 60
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Scale-up if CPU > 90% for 10 minutes"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 75
      AlarmActions: [ !Ref WebServerScaleUpPolicy ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
     AlarmDescription: "Scale-down if CPU < 70% for 10 minutes"
     MetricName: CPUUtilization
     Namespace: AWS/EC2
     Statistic: Average
     Period: 300
     EvaluationPeriods: 2
     Threshold: 50
     AlarmActions: [ !Ref WebServerScaleDownPolicy ]
     Dimensions:
       - Name: AutoScalingGroupName
         Value: !Ref WebServerGroup
     ComparisonOperator: LessThanThreshold

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EC2
          PolicyDocument:
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - s3:GetObject
                  - secretsmanager:GetSecretValue
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: InstanceRole

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 8080
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
